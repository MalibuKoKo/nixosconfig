# Docker Compose file for running paperless from the docker container registry.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8000.
#
# In addition to that, this Docker Compose file adds the following optional
# configurations:
#
# - Instead of SQLite (default), PostgreSQL is used as the database server.
# - Apache Tika and Gotenberg servers are started with paperless and paperless
#   is configured to use these services. These provide support for consuming
#   Office documents (Word, Excel, Power Point and their LibreOffice counter-
#   parts.
#
# To install and update paperless with this file, do the following:
#
# - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'
#   and '.env' into a folder.
# - Run 'docker compose pull'.
# - Run 'docker compose run --rm webserver createsuperuser' to create a user.
# - Run 'docker compose up -d'.
#
# For more extensive installation and update instructions, refer to the
# documentation.

services:
  broker:
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - redisdata:/data

  db:
    image: docker.io/library/postgres:16
    restart: unless-stopped
    volumes:
      - /mnt/docker/paperless/pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless

  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - db
      - broker
      - gotenberg
      - tika
    ports:
      - "8000:8000"
    volumes:
      - /mnt/docker/paperless/data:/usr/src/paperless/data
      # Mount originating from /mnt/data on host -> /usr/src/paperless/media in container
      - "/mnt/data/Life/Meg and Andy/Paperless/Documents:/usr/src/paperless/media"
      - /mnt/paperless/export:/usr/src/paperless/export
      # Mount originating from /mnt/data on host -> /usr/src/paperless/consume in container
      - "/mnt/data/Life/Meg and Andy/Paperless/Import:/usr/src/paperless/consume"
      # Mount originating from /mnt/data on host -> /usr/src/paperless/consume/scans in container
      - "/mnt/data/Life/Meg and Andy/Scans:/usr/src/paperless/consume/scans"
    env_file: .env
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998
    # --- ADDED FOR MOUNT MONITORING ---
    healthcheck:
      # Test the container paths that correspond to host /mnt/data mounts
      # Combine checks: If any fail (or timeout), the whole check fails (exit 1).
      test:
        [
          "CMD-SHELL",
          "timeout 15s sh -c 'stat /usr/src/paperless/media && stat /usr/src/paperless/consume && stat /usr/src/paperless/consume/scans' || exit 1",
        ]
      interval: 30s # Check every 30 seconds
      timeout: 20s # Wait up to 20 seconds for the check command
      retries: 5 # Consider unhealthy after 5 consecutive failures
      start_period: 60s # Wait 60 seconds after container start before first check
    labels:
      # Tell autoheal (running separately) to monitor this container
      - autoheal=true
    # --- END OF ADDED SECTION ---

  gotenberg:
    image: docker.io/gotenberg/gotenberg:8.7
    restart: unless-stopped

    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"

  tika:
    image: docker.io/apache/tika:latest
    restart: unless-stopped

volumes:
  redisdata:
