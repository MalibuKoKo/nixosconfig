---
- name: Configure Proxmox VE for AMD iGPU Passthrough (with Reset Fix)
  hosts: proxmox_hosts
  remote_user: root
  become: true
  gather_facts: false

  vars:
    kernel_cmdline_iommu_params: "amd_iommu=on iommu=pt video=efifb:off"

    # --- PCI IDs for the AMD iGPU (KEPT FROM YOUR SCRIPT) ---
    amd_igpu_vga_id: "1002:13c0"
    amd_igpu_audio1_id: "1002:1640"
    amd_igpu_encryption_id: "1022:1649"
    amd_igpu_usb1_id: "1022:15b6"
    amd_igpu_usb2_id: "1022:15b7"
    amd_igpu_audio2_id: "1022:15e3"

    # --- Combine IDs for vfio-pci options (NVIDIA REMOVED) ---
    vfio_pci_target_ids:
      - "{{ amd_igpu_vga_id }}"
      - "{{ amd_igpu_audio1_id }}"
      - "{{ amd_igpu_encryption_id }}"
      - "{{ amd_igpu_audio2_id }}"
      - "{{ amd_igpu_usb1_id }}"
      - "{{ amd_igpu_usb2_id }}"

    vfio_pci_ids_list_string: "{{ vfio_pci_target_ids | join(',') }}"

    # --- Host drivers to blacklist (CHANGED: amdgpu and radeon REMOVED from blacklist) ---
    # We now only blacklist NVIDIA drivers, which won't affect the AMD iGPU.
    # This is the key change to allow the reset hook to work.
    gpu_drivers_to_blacklist:
      - nouveau
      - nvidiafb

    # --- vBIOS file for AMD iGPU (KEPT - This is critical) ---
    amd_igpu_vbios_filename: "vbios_9950x.rom"
    amd_igpu_vbios_url: "https://raw.githubusercontent.com/isc30/ryzen-gpu-passthrough-proxmox/main/{{ amd_igpu_vbios_filename }}"
    kvm_bios_path: "/usr/share/kvm"

  tasks:
    - name: Ensure kernel command line in /etc/kernel/cmdline has IOMMU options (KEPT)
      ansible.builtin.lineinfile:
        path: /etc/kernel/cmdline
        regexp: '^(.*(?:root=ZFS=|root=)[^ ]+)(?:(?: amd_iommu=\S*| iommu=\S*| video=efifb:\S*)*)(.*)$'
        line: '\1 {{ kernel_cmdline_iommu_params }}\2'
        backrefs: yes
      notify: Refresh proxmox-boot-tool

    - name: Load essential VFIO modules at boot via /etc/modules (KEPT)
      ansible.builtin.lineinfile:
        path: /etc/modules
        line: "{{ item }}"
        state: present
      loop:
        - vfio
        - vfio_iommu_type1
        - vfio_pci
      notify: Update initramfs

    - name: Create KVM BIOS directory if it doesn't exist (KEPT)
      ansible.builtin.file:
        path: "{{ kvm_bios_path }}"
        state: directory
        mode: "0755"

    - name: Download vBIOS for AMD iGPU ({{ amd_igpu_vbios_filename }}) (KEPT)
      ansible.builtin.get_url:
        url: "{{ amd_igpu_vbios_url }}"
        dest: "{{ kvm_bios_path }}/{{ amd_igpu_vbios_filename }}"
        mode: "0644"

    - name: Configure modprobe for VFIO, blacklists, and softdeps (MODIFIED)
      ansible.builtin.copy:
        dest: /etc/modprobe.d/vfio-passthrough.conf
        content: |
          # Assign GPU/Audio devices to vfio-pci
          options vfio-pci ids={{ vfio_pci_ids_list_string }} disable_vga=1

          # Blacklist host drivers for GPUs (amdgpu/radeon NOT blacklisted)
          {% for driver in gpu_drivers_to_blacklist %}
          blacklist {{ driver }}
          {% endfor %}

          # Ensure vfio-pci loads before host drivers for these devices (KEPT, NVIDIA softdep removed)
          softdep radeon pre: vfio-pci
          softdep amdgpu pre: vfio-pci
          softdep snd_hda_intel pre: vfio-pci
        owner: root
        group: root
        mode: "0644"
      notify: Update initramfs

    - name: Flush handlers before reboot
      ansible.builtin.meta: flush_handlers

    - name: Inform user about next steps and reboot (KEPT)
      ansible.builtin.debug:
        msg: |
          Host configuration applied. A vBIOS file ({{ amd_igpu_vbios_filename }}) has been downloaded to {{ kvm_bios_path }}/.
          The system will now reboot.

    - name: Reboot Proxmox VE host (KEPT)
      ansible.builtin.reboot:
        msg: "Rebooting Proxmox VE host to apply GPU passthrough configuration."
        reboot_timeout: 600

  handlers:
    - name: Refresh proxmox-boot-tool
      listen: "Refresh proxmox-boot-tool"
      ansible.builtin.command:
        cmd: proxmox-boot-tool refresh
      changed_when: true

    - name: Update initramfs
      listen: "Update initramfs"
      ansible.builtin.command:
        cmd: update-initramfs -u -k all
      changed_when: true
